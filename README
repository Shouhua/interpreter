## 解释器
编译原理相关内容实践，包括CFG(Context Free Grammars), BNF(Backus Naur Form), RDP(Recursive-Descent Parsing), lexer, parser等，使用工具flex和bison实践以及手写RDP

### 四则运算计算器
目录位于calc，[calc.y](./calc/calc.y)描述了计算器语法，[main.c](./calc/main.c)手工实现了lexer和parser

### IP解析
目录位于parseip，问题主要来源于google的面试题，使用工具和手动实现，编译和使用见[Makefile](./parseip/Makefile)代码
```text
Convert an IPv4 address in the format of null-terminated C string into a 32-bit integer.
For example, given an IP address “172.168.5.1”, the output should be a 32-bit integer
with “172” as the highest order 8 bit, 168 as the second highest order 8 bit, 5 as the
second lowest order 8 bit, and 1 as the lowest order 8 bit. That is,

"172.168.5.1" => 2896692481


Requirements:

1. You can only iterate the string once.

2. You should handle spaces correctly: a string with spaces between a digit and a dot is
a valid input; while a string with spaces between two digits is not.
"172[Space].[Space]168.5.1" is a valid input. Should process the output normally.
"1[Space]72.168.5.1" is not a valid input. Should report an error.

3. Please provide unit tests
```
1. 使用flex & bison实现 <br>
[parseip.l](./parseip/parseip.l), flex文件<br>
[parseip.y](./parseip/parseip.y), bison文件<br>

2. 手动实现 <br>
[parseip_hand.h](./parseip/parseip_hand.h), 头文件<br>
[parseip_hand.c](./parseip//parseip_hand.c), 实现文件，包括lexer和parser<br>

### mastache解析

### Dynamic Programming
自顶向下
自下向顶